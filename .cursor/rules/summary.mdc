---
description: 
globs: 
alwaysApply: true
---
# Mental Tax Tracker Project Summary

## Project Overview
Mental Tax Tracker is an Android application that analyzes the cognitive load ("mental tax") generated by viewing environments or objects through your device's camera. The app quantifies how much mental strain is caused by looking at specific scenes, such as measuring the difference between a cluttered room versus an organized one, providing users with objective feedback about their surroundings.

## Key Features
- Real-time mental tax analysis of physical environments through camera
- Scoring system (1-10) to quantify cognitive load of scenes and objects
- Simple, intuitive user interface focused on core functionality
- Direct camera integration for capturing images for analysis
- Quick feedback with minimal processing time

## Tech Stack
- **Platform**: Native Android (Kotlin)
- **UI**: XML layouts with Material Design components and ConstraintLayout
- **Navigation**: Android Navigation Component
- **AI Integration**: OpenRouter API with o4-mini model for scene analysis
- **Architecture**: MVVM (Model-View-ViewModel) pattern

## Architecture
The app follows a streamlined MVVM architecture:

1. **UI Layer**:
   - MainActivity as the primary container
   - Fragments for different screens (camera view, results view)
   - ViewModels to manage UI state and business logic
   - ViewBinding for type-safe view interactions

2. **Domain Layer**:
   - Service for handling camera functionality
   - AI service for communicating with OpenRouter API
   - Analyzer for processing AI responses into mental tax scores

3. **Data Layer** (Minimal for MVP):
   - Simple in-memory caching of recent results
   - No persistent storage in initial MVP

## Future Development
- Historical tracking of mental tax scores over time
- Recommendations for reducing mental tax in detected environments
- Data persistence with local database and/or Firebase
- Advanced analytics to identify patterns in mental tax sources
- Sharing functionality for results

## Implementation Approach
- Focus on clean, minimal UI for intuitive user experience
- Emphasis on camera quality and image processing
- Efficient API integration with OpenRouter

- Privacy-first approach when handling user images